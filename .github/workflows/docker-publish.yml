name: Build and Deploy Frontend

# Controls when the workflow will run
on:
  push:
    branches: [ master ] # Trigger on pushes to the main branch
    tags:
      - 'v*'
  workflow_dispatch:

# Environment variables available to all jobs and steps
env:
  # Define Image Names for both registries
  DOCKERHUB_IMAGE_NAME: drunkwretch/quickshare # Your Docker Hub image name
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/quickshare # GHCR image name (auto uses owner)
  # !!! ACTION REQUIRED: Replace with your ACR image name, including registry endpoint and namespace
  ACR_IMAGE_NAME: registry.cn-hangzhou.aliyuncs.com/changjiong/quickshare

jobs:
  build-and-push-images: # Renamed job slightly for clarity
    name: Build Docker image and push to Docker Hub & GHCR
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions: # Permissions needed for GHCR push
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Login Steps for Both Registries ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io # Specify GHCR registry
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use the automatically generated token

      # !!! ACTION REQUIRED: Replace ACR_REGISTRY_ENDPOINT with your actual registry endpoint
      - name: Log in to Aliyun Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com # !!! Replace with your ACR registry endpoint
          username: ${{ secrets.ACR_USERNAME }} # !!! Ensure this secret exists
          password: ${{ secrets.ACR_PASSWORD }} # !!! Ensure this secret exists

      # --- Metadata for Both Registries ---
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # List both image names here
          images: |
            ${{ env.DOCKERHUB_IMAGE_NAME }}
            ${{ env.GHCR_IMAGE_NAME }}
            ${{ env.ACR_IMAGE_NAME }} # Add ACR image name
          tags: |
            # Git tag (e.g., v1.1.1) if triggered by a tag push
            type=ref,event=tag
            # Commit SHA (always useful)
            type=sha
            # 'latest' tag ONLY for pushes to the master branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Build and Push to Both ---
      - name: Build and push Docker image to both registries
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # Use all generated tags, which now include both registries
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trigger-dokploy-deploy:
    name: Trigger Dokploy Redeployment
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    needs: build-and-push-images # Depend on the updated job name
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Dokploy Webhook
        env:
          DOKPLOY_DEPLOY_HOOK_URL: ${{ secrets.DOKPLOY_DEPLOY_HOOK_URL }}
        run: |
          echo "Attempting to trigger Dokploy deployment for ref: ${{ github.ref }}"
          # Dokploy will typically pull the image configured in its UI/settings.
          # Ensure Dokploy is configured to use EITHER your Docker Hub OR GHCR image.
          # Usually, it pulls :latest by default from the configured registry.
          response_code=$(curl -s -S -w "%{http_code}" -X POST -o /dev/null "${DOKPLOY_DEPLOY_HOOK_URL}")
          echo "Dokploy webhook responded with code: ${response_code}"
          if [[ "$response_code" -ge 200 && "$response_code" -lt 300 ]]; then
            echo "Successfully triggered Dokploy deployment."
          else
            echo "Error triggering Dokploy deployment. Response code: ${response_code}"
            exit 1
          fi
